# Check connetctions to hosts
ansible all -i inventory.tmp  -m ping -k

# Run command on remote nodes
ansible all -i inventory.tmp -kb --ask-become-pass   -m command -a "ls /etc/httpd/conf/"

# List all vars per host
ansible sjc01-c01-gws31 -i production -m debug -a "var=hostvars['sjc01-c01-gws31']"


# get list of packages from one server
function get_packages () { ansible $1 -i $2 -m command -a "rpm -qa" | grep -v $1 | sort > ~/tmp/rpm_check/$1  ;  } 

# Change callback
export ANSIBLE_LOAD_CALLBACK_PLUGINS=1
ANSIBLE_STDOUT_CALLBACK=minimal /usr/bin/ansible-playbook ${WORKSPACE}/Ansible/Revitas/install.yml --tags "${Tags}"
timer - callback that show only execution time of playbook

# We can use jinja2 inside ansible strings
- name: run some command
   command: echo item {{item}}
   register: my_result
   with_items:
     - 1
     - 2
     - 3
  - name: my debug
    debug:
      msg: "{% set output = [] %}\
        {% for x in (my_result.results | map(attribute='stdout')) %}\
          {{ output.append( 'The result was: ' ~ x ) }}\
        {% endfor %}\
        {{output}}"
Output is something like: -

ok: [host1]: => {
    "msg": [
        "the result was: item 1",
        "the result was: item 2",
        "the result was: item 3"
    ]
}
ok: [host2]: => {
    "msg": [
        "the result was: item 1",
        "the result was: item 2",
        "the result was: item 3"
    ]
}

#Multiline strings in ansible
https://yaml-multiline.info/

# if you need to show dict it is better to transform it to nice json
- fail:
    msg: "Cannot determine LS url properly. \n {{ lsExternalName_out | to_nice_json }}"
  when: lsExternalName_out.stdout_lines | length != 1


# Run task one by one for each host. play_hosts - list of hosts
- name: run {{ keycloak_service }} service
  service: name="{{ keycloak_service }}" enabled=yes state=started
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"
  run_once: True

# And with role
- name: Iterate sg-mount role
    include_role:
      name: sg-mount
    vars:
      instanceID: "{{ hostvars[item].ec2_id }}"
      file_share_id: "share-869511EC"
      mount_point: "{{ shared_dir }}"
      s3path: "{{ externalName }}"
      mountAction: "create"
    delegate_to: "{{ item }}"
    with_items: "{{ ansible_play_hosts }}"
    run_once: True
    tags: cluster_prerequisits

# Variable for all hosts in group
        - name: Set hugememory value
          set_fact:
            rac_hugememory: "{{ hugememory.stdout }}"

    - set_fact: rac_hugememories="{{ rac_hugememories | default([]) + [ hostvars[item]['rac_hugememory'] | int ] }}"
      with_items: "{{ groups['ec2Oracle'] }}"

    - debug: msg="mem={{ rac_hugememories }}"

# Check for pattern
- fail: msg="There is conflicts {{ outer_item.patchid }}"
     when: 'oracle_conflict_patches.stdout is search("Prereq.+failed")'


#  true false check 

  - { role: revitas-flexbi,   cognos_version: "{{ cognosVersion }}",
      BIlicensedCustomer: "{{ True if 'analyzer' in subscription else False }}",
      tags: ['ecmbi'] }

# regex search in failed_when in multiline output
register: ecmf_configmigrate
  failed_when: >
    ( not ecmf_configmigrate.stdout | regex_search("^BUILD SUCCESSFUL", multiline=True) ) and
    ("No such file or directory" not in ecmf_configmigrate.stdout )
  changed_when: >
    (  ecmf_configmigrate.stdout | regex_search("^BUILD SUCCESSFUL", multiline=True) )

# Validate that string in the output
    - name: try https://{{ bastion_dns }}
      uri:
        url: "https://{{ bastion_dns }}/signin"
        return_content: yes
        validate_certs: no
      register: result
      retries: 3
      delay: 10
      until: result.content.find("Subspace") != -1

# indexed item - https://docs.ansible.com/ansible/latest/plugins/lookup/indexed_items.htmlhttps://docs.ansible.com/ansible/latest/plugins/lookup/indexed_items.html
- name: indexed loop demo
  debug:
    msg: "at array position {{ item.0 }} there is a value {{ item.1 }}"
  with_indexed_items:
    - "{{ some_list }}"

# create dict inside jinja2
        recovery_keys: "{% set output = dict() %}
                {% for line in init_out.stdout_lines -%}
                  {% if line.find('Recovery Key') != -1 -%}
                    {% set index =  output | length %}
                    {% set _ = output.update( { 'recovery_key_' + index | string  : line.split(':')[1] | trim } )  %}
                  {%- endif %}
                {%- endfor %}
                {{ output }}"
